param (
    [switch]$NoRestart,
    [switch]$SkipRestart
)

# Fonctions d'affichage harmonis√©es
function Write-Separator { Write-Host ("-"*60) -ForegroundColor DarkGray }
function Write-Info($msg)    { Write-Host "‚ÑπÔ∏è  $msg" -ForegroundColor Cyan }
function Write-Success($msg) { Write-Host "‚úÖ $msg" -ForegroundColor Green }
function Write-Warn($msg)    { Write-Host "‚ö†Ô∏è  $msg" -ForegroundColor Yellow }
function Write-ErrorMsg($msg){ Write-Host "‚ùå $msg" -ForegroundColor Red }

# Affichage ASCII Art KAYROS API
function Show-AsciiArt {
    1..6 | ForEach-Object { Write-Host "" }
    Write-Host @"
    ___  __    ________      ___    ___ ________  ________  ________      
    |\  \|\  \ |\   __  \    |\  \  /  /|\   __  \|\   __  \|\   ____\     
    \ \  \/  /|\ \  \|\  \   \ \  \/  / | \  \|\  \ \  \|\  \ \  \___|_    
     \ \   ___  \ \   __  \   \ \    / / \ \   _  _\ \  \\\  \ \_____  \   
      \ \  \\ \  \ \  \ \  \   \/  /  /   \ \  \\  \\ \  \\\  \|____|\  \  
       \ \__\\ \__\ \__\ \__\__/  / /      \ \__\\ _\\ \_______\____\_\  \ 
        \|__| \|__|\|__|\|__|\___/ /        \|__|\|__|\|_______|\_________\
                            \|___|/                            \|_________|
     ________  ________  ___                                               
    |\   __  \|\   __  \|\  \                                              
    \ \  \|\  \ \  \|\  \ \  \                                             
     \ \   __  \ \   ____\ \  \                                            
      \ \  \ \  \ \  \___|\ \  \                                           
       \ \__\ \__\ \__\    \ \__\                                          
        \|__|\|__|\|__|     \|__|                                            
"@ -ForegroundColor Magenta
    Write-Separator
}

# D√©finir le chemin du fichier indicateur
$tempIndicatorPath = "$env:TEMP\kayros_install_indicator.txt"

# V√©rifier si PowerShell est lanc√© en mode Administrateur
$elevated = ([System.Security.Principal.WindowsPrincipal] [System.Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([System.Security.Principal.WindowsBuiltInRole] "Administrator")

if (-not $elevated -and -not $NoRestart -and -not $SkipRestart) {
    Write-Warn "Le script n√©cessite des privil√®ges administrateur pour certaines parties. Red√©marrage en mode Admin..."
    Start-Process PowerShell -ArgumentList "-File `"$PSCommandPath`" -NoRestart -SkipRestart" -Verb RunAs
    exit
}

Show-AsciiArt

# Cr√©er le fichier indicateur pour √©viter les red√©marrages en boucle
if (!(Test-Path $tempIndicatorPath)) {
    New-Item -Path $tempIndicatorPath -ItemType File | Out-Null
}

function Ensure-WebAdministration {
    if (-not (Get-Module -ListAvailable -Name WebAdministration)) {
        Write-Warn "Le module 'WebAdministration' n'est pas disponible."
        Write-Info "Installation automatique du r√¥le IIS Management Scripts and Tools..."
        try {
            Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools -All -NoRestart -ErrorAction Stop
            Write-Success "Le r√¥le a √©t√© install√©. Tentative de chargement du module sans red√©marrage..."
            $env:PSModulePath = [System.Environment]::GetEnvironmentVariable("PSModulePath","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PSModulePath","User")
            Import-Module WebAdministration -ErrorAction Stop
            Write-Success "Module charg√© sans red√©marrage."
        } catch {
            Write-ErrorMsg "Le module n'a pas pu √™tre charg√© imm√©diatement. Un red√©marrage peut √™tre n√©cessaire."
            Write-Warn "Si le probl√®me persiste apr√®s red√©marrage, installez manuellement via les fonctionnalit√©s Windows."
            pause
            exit 0
        }
    } else {
        Import-Module WebAdministration
    }
}

function Test-ModuleInstalled($moduleName) {
    Ensure-WebAdministration
    $modules = Get-WebGlobalModule | Select-Object -ExpandProperty Name
    return $modules -contains $moduleName
}

function Install-UrlRewrite {
    Write-Host "Installation de URL Rewrite..."
    $url = "https://download.microsoft.com/download/1/2/8/128E2E22-C1B9-44A4-BE2A-5859ED1D4592/rewrite_amd64_fr-FR.msi"
    $msi = "$env:TEMP\rewrite.msi"
    Invoke-WebRequest -Uri $url -OutFile $msi
    Start-Process msiexec.exe -Wait -ArgumentList "/i `"$msi`" /quiet"
    Remove-Item $msi
}

function Install-IISNode {
    Write-Host "Installation de IISNode..."
    $url ="https://github.com/azure/iisnode/releases/download/v0.2.21/iisnode-full-v0.2.21-X64.msi"
    $msi = "$env:TEMP\iisnode.msi"
    Invoke-WebRequest -Uri $url -OutFile $msi
    Start-Process msiexec.exe -Wait -ArgumentList "/i `"$msi`" /quiet"
    Remove-Item $msi
}

function Install-IISStack {
    # D√©tection du syst√®me d'exploitation
    $osVersion = (Get-CimInstance Win32_OperatingSystem).Caption
    Write-Info "D√©tection du syst√®me : $osVersion"
    Write-Separator

    # V√©rification et installation d'IIS
    if ($osVersion -match "Windows Server") {
        if (!(Get-WindowsFeature -Name Web-Server).Installed) {
            Write-Info "Installation d'IIS sur Windows Server..."
            Install-WindowsFeature -Name Web-Server -IncludeManagementTools
            Write-Success "IIS install√© sur Windows Server."
        }
        else {
            Write-Success "IIS d√©j√† install√© sur Windows Server."
        }
    }
    elseif ($osVersion -match "Windows 11") {
        Write-Info "V√©rification d'IIS sur Windows 11..."
        if (!(Get-WindowsOptionalFeature -Online | Where-Object FeatureName -eq "IIS-WebServer").State -eq "Enabled") {
            Write-Info "Installation d'IIS sur Windows 11..."
            dism /online /enable-feature /all /featurename:IIS-WebServer /quiet /norestart
            Write-Success "IIS install√© sur Windows 11."
        }
        else {
            Write-Success "IIS d√©j√† install√© sur Windows 11."
        }
    }
    else {
        Write-ErrorMsg "Syst√®me non pris en charge. Arr√™t du script."
        exit 1
    }
    Write-Separator

    # WebAdministration
    Ensure-WebAdministration

    # URL Rewrite
    if (Test-ModuleInstalled "RewriteModule") {
        Write-Success "URL Rewrite d√©j√† install√©."
    } else {
        Install-UrlRewrite
        if (Test-ModuleInstalled "RewriteModule") {
            Write-Success "URL Rewrite install√© avec succ√®s."
        } else {
            Write-ErrorMsg "√âchec de l'installation de URL Rewrite."
        }
    }

    # IISNode
    if (Test-ModuleInstalled "iisnode") {
        Write-Success "IISNode d√©j√† install√©."
    } else {
        Install-IISNode
        if (Test-ModuleInstalled "iisnode") {
            Write-Success "IISNode install√© avec succ√®s."
        } else {
            Write-ErrorMsg "√âchec de l'installation de IISNode."
        }
    }
    Write-Separator
}

#RUN WITH ELEVATION
try {
    # Arr√™ter le script imm√©diatement en cas d'erreur
    $ErrorActionPreference = "Stop"

    # Appel unique pour toute la stack IIS
    Install-IISStack

    # V√©rifier si Git est disponible
    try {
        $gitVersion = & git --version 2>$null
        if (!$gitVersion) {
            throw "Git n'est pas install√©."
        }
        Write-Success "Git d√©j√† install√© ($gitVersion)."
    }
    catch {
        
        # URL de t√©l√©chargement de Git
        $gitInstallerUrl = "https://github.com/git-for-windows/git/releases/download/v2.49.0.windows.1/Git-2.49.0-64-bit.exe"
        $gitInstallerPath = "$env:TEMP\Git-2.49.0-64-bit.exe"

        # T√©l√©charger le programme d'installation
        Write-Info "üì• T√©l√©chargement de l'installateur Git..."
        Invoke-WebRequest -Uri $gitInstallerUrl -OutFile $gitInstallerPath -ErrorAction Stop -UseBasicParsing | Out-Null
        Write-Success "‚úÖ T√©l√©chargement termin√© : $gitInstallerPath"

        # Lancer l'installation silencieuse
        Write-Info "üöÄ Installation de Git..."
        Start-Process -FilePath $gitInstallerPath -ArgumentList "/VERYSILENT /NORESTART" -Wait
        Write-Success "‚úÖ Git install√© avec succ√®s."

        # Supprimer le fichier d'installation apr√®s utilisation
        Remove-Item $gitInstallerPath -Force

    }
    Write-Separator

    # V√©rification et installation de Node.js
    try {
        $nodeVersion = & node -v 2>$null
        if ($nodeVersion -notmatch "^v22\..*") {  # V√©rifier si la version actuelle est diff√©rente de 22
            throw "Node.js n'est pas en version 22."
        }
        Write-Success "Node.js d√©j√† install√© ($nodeVersion)."
    }
    catch {
        Write-Warn "Node.js n'est pas d√©tect√© ou n'est pas en version 22. Installation en cours..."
        $nodeInstaller = "https://nodejs.org/dist/v22.14.0/node-v22.14.0-x64.msi"
        $nodeInstallerPath = "$env:TEMP\nodejs.msi"
        Write-Info "üì• T√©l√©chargement de l'installateur Node.js..."
        Invoke-WebRequest -Uri $nodeInstaller -OutFile $nodeInstallerPath -ErrorAction Stop -UseBasicParsing | Out-Null
        Write-Success "‚úÖ T√©l√©chargement termin√© : $nodeInstallerPath"
        Start-Process -FilePath $nodeInstallerPath -ArgumentList "/quiet" -Wait
        Write-Success "Node.js version 22 install√© avec succ√®s !"
    }
    Write-Separator

    # Actualisation des variables d'environnement
    Write-Info "Actualisation des variables d'environnement pour reconna√Ætre npm..."
    $newPath = [Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [Environment]::GetEnvironmentVariable("Path", "User")
    [Environment]::SetEnvironmentVariable("Path", $newPath, "Process")
    [Environment]::SetEnvironmentVariable("Path", $newPath, "User")
    [Environment]::SetEnvironmentVariable("Path", $newPath, "Machine")
    $env:Path = $newPath
    Write-Success "Variables d'environnement actualis√©es."
    Write-Separator

    Write-Warn "Red√©marrage du script sans √©l√©vation pour la suite..."
    if (-not $SkipRestart) {
        Start-Process PowerShell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`" -NoRestart -SkipRestart" -NoNewWindow
        exit
    }

}
catch {
    Write-ErrorMsg "Une erreur s'est produite dans la section avec √©l√©vation : $_"
    if (Test-Path $tempIndicatorPath) {
        Remove-Item $tempIndicatorPath -Force
    }
    pause
}

# V√©rifier si le script doit continuer sans √©l√©vation
if ($elevated -and -not $NoRestart -and -not $SkipRestart) {
    Write-Warn "Red√©marrage du script sans √©l√©vation pour la suite..."
    if (Test-Path $tempIndicatorPath) {
        Remove-Item $tempIndicatorPath -Force
    }
    Start-Process PowerShell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`" -NoRestart -SkipRestart" -NoNewWindow
    exit
}

# Configuration IIS
Ensure-WebAdministration

#RUN WITHOUT ELEVATION
try {
    function Test-GitHubConnection {
        Write-Info "`nüîç Test de connexion √† GitHub via SSH..."

        # V√©rifier si le dossier .ssh existe, sinon le cr√©er
        $sshFolderPath = "$env:USERPROFILE\.ssh"
        if (!(Test-Path $sshFolderPath)) {
            Write-Info "Cr√©ation du dossier .ssh..."
            New-Item -ItemType Directory -Path $sshFolderPath | Out-Null
        }

        # V√©rifier si github.com est d√©j√† dans known_hosts
        $knownHostsPath = "$sshFolderPath\known_hosts"
        if (!(Test-Path $knownHostsPath)) {
            Write-Info "Ajout de github.com au fichier known_hosts..."
            try {
                # Ex√©cuter ssh-keyscan et ajouter les cl√©s au fichier known_hosts avec l'encodage UTF-8
                $ErrorActionPreference = "Continue"  # Ajustement temporaire pour √©viter l'arr√™t global
                $keys = ssh-keyscan github.com 2>&1
                if ($LASTEXITCODE -eq 0) {
                    $keys | Out-File -Encoding UTF8 -FilePath $knownHostsPath
                    Write-Success "‚úÖ Cl√© SSH ajout√©e pour github.com."
                }
                else {
                    Write-ErrorMsg "‚ùå Une erreur s'est produite lors de l'ex√©cution de ssh-keyscan : $keys"
                    Write-ErrorMsg "V√©rifiez votre connexion r√©seau et r√©essayez."
                    return $false
                }
            }
            catch {
                Write-ErrorMsg "‚ùå Une erreur inattendue s'est produite lors de l'ex√©cution de ssh-keyscan : $_"
                Write-ErrorMsg "V√©rifiez votre connexion r√©seau et r√©essayez."
                return $false
            }
            finally {
                $ErrorActionPreference = "Stop"  # R√©tablir la pr√©f√©rence d'erreur globale
            }
        }
        else {
            Write-Success "github.com est d√©j√† pr√©sent dans le fichier known_hosts."
        }

        try {
            # Ex√©cuter la commande SSH
            $sshTest = ssh -T git@github.com 2>&1

            # V√©rifier si le message attendu est retourn√©
            if ($sshTest -match "successfully authenticated" -or $sshTest -match "does not provide shell access") {
                Write-Success "‚úÖ Connexion SSH √† GitHub r√©ussie."
                return $true
            }
            else {
                Write-ErrorMsg "‚ùå Connexion SSH √† GitHub √©chou√©e. Message re√ßu : $sshTest"
                return $false
            }
        }
        catch {
            # G√©rer sp√©cifiquement les exceptions g√©n√©r√©es par SSH
            $errorMessage = $_.Exception.Message
            # Afficher le message d'exception uniquement si la cl√© SSH existe
            $sshKeyPath = "$env:USERPROFILE\.ssh\kayros_api_rsa"
            if ((Test-Path $sshKeyPath) -and ($errorMessage -match "successfully authenticated" -or $errorMessage -match "does not provide shell access")) {
                Write-Success "‚úÖ Connexion SSH √† GitHub r√©ussie malgr√© l'exception."
                return $true
            }
            elseif (Test-Path $sshKeyPath) {
                Write-ErrorMsg "‚ùå Une exception s'est produite lors de la connexion √† GitHub : $errorMessage"
                Write-ErrorMsg "V√©rifiez votre configuration SSH et r√©essayez."
                return $false
            }
            # Si pas de cl√© SSH, ne rien afficher de plus
            return $false
        }
    }

    $repoOwner = "I-K-D-S"
    $repoName = "kayros.api"
    $deployKeyUrl = "https://github.com/$repoOwner/$repoName/settings/keys"
    $sshKeyPath = "$env:USERPROFILE\.ssh\kayros_api_rsa"

    if (Test-GitHubConnection) {
        Write-Success "‚úÖ Connexion SSH √† GitHub r√©ussie. Pas besoin de g√©n√©rer une nouvelle cl√© ou d'ajouter des configurations suppl√©mentaires."
    }
    else {
        Write-ErrorMsg "‚ùå √âchec de l'authentification SSH. G√©n√©ration et configuration d'une cl√© SSH requise."

        # Cr√©ation et configuration de la cl√© SSH
        $sshFolderPath = "$env:USERPROFILE\.ssh"
        if (!(Test-Path $sshFolderPath)) {
            New-Item -ItemType Directory -Path $sshFolderPath | Out-Null
        }

        if (!(Test-Path $sshKeyPath)) {
            Get-Service -Name ssh-agent | Set-Service -StartupType Manual
            Start-Service ssh-agent

            ssh-keygen -t ed25519 -C "bruno.marchasson@gmail.com" -f "$sshKeyPath" -N `"`"
            # ssh-keyscan github.com >> "$env:USERPROFILE\.ssh\known_hosts"
            ssh-add "$sshKeyPath"
            # Ajouter la configuration SSH pour GitHub
            $sshConfigPath = "$sshFolderPath\config"
            if (!(Test-Path $sshConfigPath)) {
                Write-Info "Cr√©ation du fichier de configuration SSH..."
                New-Item -Path $sshConfigPath -ItemType File -Force | Out-Null
            }

            # Ajouter ou mettre √† jour la configuration pour GitHub
            $sshConfigContent = @"
Host github.com
    HostName github.com
    User git
    IdentityFile $sshKeyPath
    IdentitiesOnly yes
"@

            if (!(Get-Content $sshConfigPath | Select-String -Pattern "Host github.com")) {
                Write-Info "Ajout de la configuration SSH pour GitHub dans $sshConfigPath..."
                # √âcrire sans BOM
                $sshConfigContent | Set-Content -Path $sshConfigPath -Encoding Ascii
            }
            else {
                Write-Success "La configuration SSH pour GitHub existe d√©j√† dans $sshConfigPath."
            }
        }
        $sshPublicKey = Get-Content "$sshKeyPath.pub"
        # Afficher la cl√© publique et l'URL
        Write-Info "`nüîë **Cl√© SSH publique:**`n$sshPublicKey`n"
        Write-Info "Cl√© SSH copi√©e dans le presse-papiers. Vous pouvez la coller sur GitHub.`n"
        Write-Info "`nüåê **URL GitHub pour l'ajout de la cl√©:**`n$deployKeyUrl`n"
    
        # Copier la cl√© publique dans le presse-papiers (n√©cessite PowerShell 5+)
        $sshPublicKey | Set-Clipboard

        Start-Process $deployKeyUrl

        # Mettre en pause pour ajouter la cl√© SSH sur GitHub
        Write-Warn "`nüîí **Ajoutez la cl√© SSH sur GitHub maintenant.**"
        pause
    }

    # V√©rification et gestion du d√©p√¥t GitHub
    $targetPath = (Join-Path $PSScriptRoot "kayros.api")  # Utilisation du r√©pertoire du script
    if (!(Test-Path $targetPath)) {
        Write-Info "Clonage du d√©p√¥t kayros.api..."
        git clone git@github.com:I-K-D-S/kayros.api.git $targetPath
    }
    elseif ((Get-ChildItem $targetPath -Recurse | Measure-Object).Count -eq 0) {
        Write-Info "Clonage du d√©p√¥t kayros.api (dossier vide)..."
        git clone git@github.com:I-K-D-S/kayros.api.git $targetPath
    }
    else {
        Write-Info "Mise √† jour du d√©p√¥t kayros.api..."
        Push-Location $targetPath
        git reset --hard
        git pull
        Pop-Location
    }
    Write-Separator

    Push-Location $targetPath

    # Check if .env exists, if not, copy from .env.sample and prompt user to edit
    if (!(Test-Path "$targetPath\.env")) {
        Write-Warn ".env n'existe pas. Copie de .env.sample vers .env..."
        Copy-Item "$targetPath\.env.sample" "$targetPath\.env"
        Write-Success ".env cr√©√©. Veuillez le configurer."
        
        # Open .env file for user to edit
        Start-Process "$targetPath\.env"

        # Wait for user to finish editing .env
        Write-Warn "Veuillez terminer la configuration de .env et appuyez sur une touche pour continuer..."
        pause
    }
    Write-Separator

    Write-Info "Installation des d√©pendances avec npm..."
    npm i --force

    Write-Info "Construction du projet avec npm..."
    npm run build
    Pop-Location

    # Add IIS directory to PATH
    $iisPath = Join-Path $env:windir "system32\inetsrv"
    
    # Check if IIS path already exists in the environment variable
    if ($env:Path -notlike "*;$iisPath" -and $env:Path -ne $iisPath) {
        $env:Path += ";$iisPath"
    }

    # Unlock web.config sections
    Write-Info "D√©verrouillage des sections web.config..."
    try {
        & appcmd unlock config -section:system.webServer/modules
        & appcmd unlock config -section:system.webServer/handlers
        Write-Success "Sections web.config d√©verrouill√©es."
    }
    catch {
        Write-ErrorMsg "√âchec du d√©verrouillage des sections web.config : $_"
    }
    Write-Separator

    
    if (!(Get-Website -Name "kayros.api" -ErrorAction SilentlyContinue)) {
        Write-Info "Cr√©ation du site IIS kayros.api sur le port 8850..."
        New-WebSite -Name "kayros.api" -Port 8850 -PhysicalPath $targetPath -Force
        Set-ItemProperty "IIS:\Sites\kayros.api" -Name applicationPool -Value "DefaultAppPool"
        Write-Success "Site IIS kayros.api cr√©√©."
    } else {
        Write-Success "Site IIS kayros.api d√©j√† existant."
    }

    # Get the application pool identity
    $appPoolName = (Get-Website -Name "kayros.api").applicationPool
    $appPoolIdentity = "IIS APPPOOL\$appPoolName"

    # Grant permissions to the application pool identity on C:\Users\user\Documents
    $documentsPath = "C:\Users\$env:USERNAME\Documents"
    Write-Info "Attribution des permissions au pool d'application '$appPoolIdentity' sur '$documentsPath'..."
    try {
        $acl = Get-Acl -Path $documentsPath
        $permission = "$appPoolIdentity","ReadAndExecute","ContainerInherit, ObjectInherit","None","Allow"
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
        $acl.AddAccessRule($accessRule)
        Set-Acl -Path $documentsPath -AclObject $acl
        Write-Success "Permissions accord√©es au pool d'application sur Documents."
    }
    catch {
        Write-ErrorMsg "√âchec permissions pool d'application sur Documents : $_"
    }

    # Grant permissions to the application pool identity
    Write-Info "Attribution des permissions au pool d'application '$appPoolIdentity' sur '$targetPath'..."
    try {
        $acl = Get-Acl -Path $targetPath
        $permission = "$appPoolIdentity","Modify, FullControl","ContainerInherit, ObjectInherit","None","Allow"
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
        $acl.AddAccessRule($accessRule)
        Set-Acl -Path $targetPath -AclObject $acl
        Write-Success "Permissions accord√©es au pool d'application."
    }
    catch {
        Write-ErrorMsg "√âchec permissions pool d'application : $_"
    }

    # Grant IUSR read access
    Write-Info "Attribution des permissions de lecture √† IUSR sur '$targetPath'..."
    try {
        $acl = Get-Acl -Path $targetPath
        $permission = "IUSR","Read","ContainerInherit, ObjectInherit","None","Allow"
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
        $acl.AddAccessRule($accessRule)
        Set-Acl -Path $targetPath -AclObject $acl
        Write-Success "Permissions accord√©es √† IUSR."
    }
    catch {
        Write-ErrorMsg "√âchec permissions IUSR : $_"
    }

    # Restart the website
    Write-Info "Red√©marrage du site kayros.api..."
    try {
        Stop-Website -Name "kayros.api"
        Start-Website -Name "kayros.api"
        Write-Success "Site kayros.api red√©marr√© avec succ√®s."
    } catch {
        Write-ErrorMsg "Erreur lors du red√©marrage du site : $_"
    }
    Write-Separator

    Write-Success "D√©ploiement termin√© avec succ√®s !"
    if (Test-Path $tempIndicatorPath) {
        Remove-Item $tempIndicatorPath -Force
    }

    # Ouvre le navigateur sur l'URL de test
    $testUrl = "http://localhost:8850/api/hello"
    Write-Info "Ouverture du navigateur sur $testUrl"
    Start-Process $testUrl

    pause
}
catch {
    Write-ErrorMsg "Une erreur s'est produite dans la section sans √©l√©vation : $_"
    if (Test-Path $tempIndicatorPath) {
        Remove-Item $tempIndicatorPath -Force
    }
    pause
}